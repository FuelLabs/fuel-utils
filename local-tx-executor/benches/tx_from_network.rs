use criterion::{
    criterion_group,
    criterion_main,
    Criterion,
};
use fuel_tx::Transaction;
use fuel_types::canonical::Deserialize;
use fuel_vm::interpreter::MemoryInstance;
use local_tx_executor::executor::ExecutorInner;
use std::path::PathBuf;

fn tx_from_network(c: &mut Criterion) {
    let height = 13492580;

    let tokio_runtime = tokio::runtime::Builder::new_multi_thread()
        .worker_threads(4)
        .enable_all()
        .build()
        .unwrap();

    let future = ExecutorInner::new(
        Some(height.into()),
        PathBuf::new(),
        "http://127.0.0.1:4000/v1/graphql".parse().unwrap(),
    );

    let mut executor = tokio_runtime.block_on(future).unwrap();

    let tx_hex = "0x000000000000000000000000001e8480617d0b3a6b873ae54e633493eb955626eca559b072c67f1a7b75740e32ae25ba00000000000002f000000000000000a500000000000000080000000000000004000000000000000500000000000000011a403000504100301a445000ba49000032400481504100205d490000504100083240048220451300524510044a4400000ace23070489e6ae77d4938e3ad43f763a1e6650286e77429bb3785c24a7dec800000000000002982e40f2b244b98ed6b8204b3de0156c6961f98525c8162f80162fcf53eebd90e700000000ffffffff446561646c696e652070617373656400526f757465723a20494e56414c49445f504154480000000066656573000000000000000000000000000000000000000000000000000000000000000000000000706f6f6c5f6d65746164617461000000506f6f6c206e6f742070726573656e74496e73756666696369656e74206f757470757420616d6f756e740000000000007377617000000000ffffffffffffffffcccccccccccc0002ffffffffffff00018c25cb3686462e9affffffffffff000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000027100000000000003d940000000000003d9c0000000000003dac0000000000003ac400000000000039c000000000000030600000000000002aa00000000000002a80000000000000276400000000000025dc00000000000011b8000000000000119c000000000000116c0000000000001148000000000000112400000000000010f4000000000000105400000000000010280000000000000ff40000000000000fd00000000000000dcc0000000000000d4c0000000000000cbc0000000000000c800000000000000c480000000000000c280000000000000c0c0000000000000bec0000000000000ae00000000000000970000000000000089400000000000007d40000000000000738000000000000068c00000000000006f400000000000006d000000000000005cc000000000000063c0000000038f67947239ed6e12b7ce4089ee245244e3bf906999a6429c2a9a445a1e1faf56914a4ab000000003994b95a0000000000000001239ed6e12b7ce4089ee245244e3bf906999a6429c2a9a445a1e1faf56914a4abf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad070100000000000000007d098351c04f30cbe21728583a844cd171172aa5aac2df55e5010ac873ee0d40ffffffff00000000000000000013490000000000000001a99f2c46b475377bf6914fdc9904c2440d7e459333713daf1855b74cd28595610000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cde16500000000000000002e40f2b244b98ed6b8204b3de0156c6961f98525c8162f80162fcf53eebd90e70000000000000000850fec5ebc9b2161a1f168cf9bc30341441244e496d9e575344442ae6fd1711d00000000000000027d098351c04f30cbe21728583a844cd171172aa5aac2df55e5010ac873ee0d400000000038f67947239ed6e12b7ce4089ee245244e3bf906999a6429c2a9a445a1e1faf56914a4ab00000000003ed1f80000000000000001000000000000000000000000000011d900000000000000e000000000000000081a403000504100301a445000ba49000032400481504100205d490000504100083240048220451300524510044a440000c58d08df0d31dfaaadd57de9f04d89b7abc88b28a2f45f522cc5c1fd8da6797800000000000000880000000000000000000000006303b98b9fdcd0c0507558fef8fa0a80e54195af19457468657265756d205369676e6564204d6573736167653a0a3332000000000000000000000000000000000000000000000000000000000000000000000000cccccccccccc00020000000000000b5c0000000000000b740000000000000b6c000000000000068000000000000000000000000000000000403ca15768b02598d8abd82a9235a60ccf816929e29c9b033fe04fbe3c252bd900000000000000007d098351c04f30cbe21728583a844cd171172aa5aac2df55e5010ac873ee0d4000000000000f8b1af8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad070000000000cddf6d0000000000000001000000000000000000000000000011d900000000000000e000000000000000081a403000504100301a445000ba49000032400481504100205d490000504100083240048220451300524510044a440000c58d08df0d31dfaaadd57de9f04d89b7abc88b28a2f45f522cc5c1fd8da6797800000000000000880000000000000000000000006303b98b9fdcd0c0507558fef8fa0a80e54195af19457468657265756d205369676e6564204d6573736167653a0a3332000000000000000000000000000000000000000000000000000000000000000000000000cccccccccccc00020000000000000b5c0000000000000b740000000000000b6c000000000000068000000000000000000000000000000001a99f2c46b475377bf6914fdc9904c2440d7e459333713daf1855b74cd28595610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cde1650000000000000000a703db08d1dbf30a6cd2fef942d8dcf03f25d2254e2091ee1f97bf5fa615639e000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037d098351c04f30cbe21728583a844cd171172aa5aac2df55e5010ac873ee0d40000000003a299ec8f8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad0700000000000000027d098351c04f30cbe21728583a844cd171172aa5aac2df55e5010ac873ee0d400000000000000000239ed6e12b7ce4089ee245244e3bf906999a6429c2a9a445a1e1faf56914a4ab00000000000000027d098351c04f30cbe21728583a844cd171172aa5aac2df55e5010ac873ee0d4000000000000f897df8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad0700000000000000010000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040aa98e3605c415828dfea8d522d82be09ff6072ed65b65a1b99a73b38a5d75c72f5178400324e2120e35e2c53368fc15c4d27e921e11b37505681400fbf0e291c";
    let tx_hex = tx_hex.strip_prefix("0x").unwrap();
    let tx_bytes = hex::decode(tx_hex).unwrap();
    let transaction = Transaction::from_bytes(&tx_bytes).unwrap();
    let transaction = vec![transaction];
    let mut executor = tokio_runtime.block_on({
        let transaction = transaction.clone();
        async move {
            let mut memory = MemoryInstance::new();
            let receipts = executor.dry_run(transaction.clone(), &mut memory).unwrap();
            println!("{:?}", receipts);
            executor
        }
    });

    let mut memory = MemoryInstance::new();
    {
        let mut group = c.benchmark_group("tx_from_network");
        group.sample_size(100);
        group.bench_function("tx_from_network", |b| {
            b.iter(|| {
                executor.dry_run(transaction.clone(), &mut memory).unwrap();
            });
        });
        group.finish();
    }
}

criterion_group!(benches, tx_from_network);
criterion_main!(benches);

// If you want to debug the benchmarks, you can run them with code below:
// But first you need to comment `criterion_group` and `criterion_main` macros above.
//
// fn main() {
//     let criterion = Criterion::default();
//     let mut criterion = criterion.with_filter("tx_from_network");
//     tx_from_network(&mut criterion);
// }
//
// #[test]
// fn dummy() {}
